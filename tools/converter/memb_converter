#!/usr/bin/env python3

import numpy as np
import argparse
from itertools import islice
from statistics import median

from memb import Builder, available_compression_strategies


def convert(filename, max_words):
    data = []
    with open(filename) as f:
        for line in islice(f, max_words):
            raw_data = line.strip().split(' ')
            if len(raw_data) > 2:
                word, *embedding = raw_data
                try:
                    data.append((word, np.float32(embedding)))
                except Exception as e:
                    print('Expetion while parsing: {}'.format(e))

    orig_data_len = len(data)

    dims = [len(embedding) for word, embedding in data]
    dim = int(median(dims))
    data = [(word, embedding) for word, embedding in data if len(embedding) == dim]

    discarded_items_count = orig_data_len - len(data)
    if discarded_items_count > 0:
        print('{} items are discarded due to inconsistent vector length'.format(discarded_items_count))

    return data, dim


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Convert word vectors to binary format.')
    parser.add_argument('--from', dest='source_filename', required=True)
    parser.add_argument('--to', dest='dest_filename', required=True)
    parser.add_argument('--quantization', dest='quantization', required=True, choices=available_compression_strategies())
    parser.add_argument('--bits-per-weight', dest='bits_per_weight', type=int, default=4)
    parser.add_argument('--max-words', dest='max_words', type=int)
    args = parser.parse_args()

    embeddings, dim = convert(args.source_filename, args.max_words)
    builder = Builder(dim, args.quantization, args.bits_per_weight)

    for word, embedding in embeddings:
        try:
            builder.add_word(word, embedding)
        except Exception as e:
            print('Exception ({}) while trying to add word'.format(e))

    builder.save(args.dest_filename)
